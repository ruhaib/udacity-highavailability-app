Parameters:
    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String

    ImageID:
        Description: AMI image id
        Type: AWS::EC2::Image::Id

    InstanceType:
        Description: EC2 Instance Type
        Type: String

Resources:
    UdacityS3ReadOnlyEC2Role:
        Type: AWS::IAM::Role
        Properties:
            Description: Read only access to S3 for EC2 instances
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    -   Effect: Allow
                        Action:
                            - sts:AssumeRole
                        Principal:
                            Service:
                                - ec2.amazonaws.com
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
            RoleName: !Sub ${EnvironmentName}-S3ReadOnlyC2
            Tags:
                -   Key: Name
                    Value: !Sub ${EnvironmentName}-Role
    # instace profile contains the IAM Role name(s) that we want to associate to our auto-scaling EC2 Servers
    # never give too many permissions to your EC2 instances! if they get hacked, the permissions get hacked also!
    # in this example, I create a Role called UdacityS3ReadOnlyEC2Role and just give it a policy of S3 Read-Only Access
    ProfileWithRolesForOurApp:
        Type: AWS::IAM::InstanceProfile
        Properties:
            Roles:
                - UdacityS3ReadOnlyEC2Role

    WebServerSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Allow http to our hosts and SSH from local only
            VpcId:
                Fn::ImportValue:
                  !Sub "${EnvironmentName}-VPCID"
            SecurityGroupIngress:
                -   IpProtocol: tcp
                    FromPort: 80
                    ToPort: 80
                    CidrIp: 0.0.0.0/0
                -   IpProtocol: tcp
                    FromPort: 22
                    ToPort: 22
                    CidrIp: 0.0.0.0/0
            SecurityGroupEgress:
                -   IpProtocol: tcp
                    FromPort: 0
                    ToPort: 65535
                    CidrIp: 0.0.0.0/0

    WebAppLaunchConfig:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
            UserData:
                Fn::Base64: !Sub |
                    #!/bin/bash
                    apt-get update -y
                    apt-get install apache2 -y
                    systemctl start apache2.service
                    cd /var/www/html
                    echo "Udacity Demo Web Server Up and Running!" > index.html
            ImageId: !Ref ImageID
            IamInstanceProfile: !Ref ProfileWithRolesForOurApp
            SecurityGroups:
                -   Ref: WebServerSecGroup
            InstanceType: !Ref InstanceType
            BlockDeviceMappings:
                -   DeviceName: "/dev/sdk"
                    Ebs:
                        VolumeSize: '10'

    LBSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Allow http to our load balancer
            VpcId:
                Fn::ImportValue:
                  !Sub "${EnvironmentName}-VPCID"
            SecurityGroupIngress:
                -   IpProtocol: tcp
                    FromPort: 80
                    ToPort: 80
                    CidrIp: 0.0.0.0/0
            SecurityGroupEgress:
                -   IpProtocol: tcp
                    FromPort: 80
                    ToPort: 80
                    CidrIp: 0.0.0.0/0

    WebAppLB:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
            Subnets:
                -   Fn::ImportValue: !Sub "${EnvironmentName}-PUB-SN1"
                -   Fn::ImportValue: !Sub "${EnvironmentName}-PUB-SN2"
            SecurityGroups:
                -   Ref: LBSecGroup

    Listener:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties:
            DefaultActions:
                -   Type: forward
                    TargetGroupArn:
                        Ref: WebAppTargetGroup
            LoadBalancerArn:
                Ref: WebAppLB
            Port: '80'
            Protocol: HTTP

    ALBListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            Actions:
                -   Type: forward
                    TargetGroupArn: !Ref 'WebAppTargetGroup'
            Conditions:
                -   Field: path-pattern
                    Values: [ / ]
            ListenerArn: !Ref 'Listener'
            Priority: 1

    WebAppGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
            VPCZoneIdentifier:
                -   Fn::ImportValue:
                      !Sub "${EnvironmentName}-PRIV-NETS"
            LaunchConfigurationName:
                Ref: WebAppLaunchConfig
            MinSize: '4'
            MaxSize: '8'
            TargetGroupARNs:
                -   Ref: WebAppTargetGroup

    WebAppTargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            HealthCheckIntervalSeconds: 120
            HealthCheckPath: /
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 8
            HealthyThresholdCount: 2
            Port: 80
            Protocol: HTTP
            UnhealthyThresholdCount: 5
            VpcId:
                Fn::ImportValue:
                    Fn::Sub: "${EnvironmentName}-VPCID"

Outputs:
    LoadBalancerURL:
        Description: Public URL of Web App LoadBalancer
        Value: !Join [ "", [ "http://", !GetAtt WebAppLB.DNSName ] ]
        Export:
          Name: !Sub ${EnvironmentName}-LB-URL
